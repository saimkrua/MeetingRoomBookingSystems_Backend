require("dotenv").config();
const User = require('../model/user');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const SECRET_KEY = process.env.SECRET_KEY

// signUp a new user
exports.signUpNewUser = async (req, res) => {
    try {
        const hashedPassword = await bcrypt.hash(req.body.password, 10);
        const user = await User.create({
            username: req.body.username,
            email: req.body.email,
            password: hashedPassword
        });
        const token = jwt.sign({ userId: user._id }, SECRET_KEY);
        res.status(201).json({ message: 'User registered successfully', token });
    } 
    catch (error) {
        if (error.code === 11000 && error.keyPattern) {
            if (error.keyPattern.email) {res.status(409).json({ message: 'Email already exists' });
            } else if (error.keyPattern.username) {res.status(409).json({ message: 'Username already exists' });
            } else {res.status(409).json({ message: 'Duplicate field already exists' });}
        } else {res.status(500).json({ message: error.message });}
    }
};

//signIn User
exports.signInUser = async (req, res) => {
    try {
        const user = await User.findOne({ username: req.body.username });
        if (!user) {
            return res.status(401).json({ message: 'Invalid username or password' });
        }
        const isMatch = await bcrypt.compare(req.body.password, user.password);
        if (!isMatch) {
            return res.status(401).json({ message: 'Invalid username or password' });
        }
        const token = jwt.sign({ userId: user._id }, SECRET_KEY);
        res.json({ message: 'Sign-in successful', token });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};
