const User = require('../model/user');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
require("dotenv").config();
const SECRET_KEY = process.env.SECRET_KEY

// signUp a new user
exports.signUpNewUser = async (req, res) => {
    try {
        const { username, email, password } = req.body;
    
        // Check if the user already exists
        const existingUser = await User.findOne({ username });
        if (existingUser) {
            return res.status(409).json({ message: 'User already exists' });
        }
    
        // Hash the password
        const hashedPassword = await bcrypt.hash(password, 10);
    
        // Create a new user
        const newUser = new User({
            username,
            email,
            password: hashedPassword
        });
    
        // Save the user to the database
        await newUser.save();
    
        // Generate a JWT token
        const token = jwt.sign({ userId: newUser._id }, SECRET_KEY);
    
        res.status(201).json({ message: 'User registered successfully', token });
        } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

//signIn User
exports.signInUser = async (req, res) => {
    try {
        const { username, password } = req.body;
    
        // Check if the user exists
        const user = await User.findOne({ username });
        if (!user) {
            return res.status(401).json({ message: 'Invalid username or password' });
        }
    
        // Compare the password
        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(401).json({ message: 'Invalid username or password' });
        }
    
        // Generate a JWT token
        const token = jwt.sign({ userId: user._id }, SECRET_KEY);
    
        res.json({ message: 'Sign-in successful', token });
        } catch (error) {
        res.status(500).json({ message: error.message });
    }
};
